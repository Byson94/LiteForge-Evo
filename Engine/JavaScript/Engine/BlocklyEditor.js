/*
This file uses the library "Blockly" developed by Google
More details can be found on "LiteForge-Evo/Third-party libraries/Blocky LICENSE"
*/

  let currentCode = '';  // This will hold the JS code generated by Blockly
  let isBlockyInitialized = false;
  
  function initializeBlockyEditor() {
    if (!isBlockyInitialized && typeof Blockly !== 'undefined') {
  
      var workspace = Blockly.inject('blocklyDiv', {
        toolbox: `
          <xml id="toolbox" style="display: none">
            <!-- Control -->
            <category name="Control" colour="#FFBF00">
              <block type="if_game_started"></block>
              <block type="controls_if"></block>
              <block type="controls_repeat_ext"></block>
              <block type="controls_for"></block>
              <block type="controls_whileUntil"></block>
              <block type="repeat_forever"></block>
            </category>
  
            <!-- Logic -->
            <category name="Logic" colour="#4C97FF">
              <block type="logic_compare"></block>
              <block type="logic_operation"></block>
              <block type="logic_negate"></block>
              <block type="logic_boolean"></block>
              <block type="logic_null"></block>
              <block type="logic_ternary"></block>
            </category>
  
            <!-- Math -->
            <category name="Math" colour="#5C2D91">
              <block type="math_number"></block>
              <block type="math_arithmetic"></block>
              <block type="math_single"></block>
              <block type="math_trig"></block>
              <block type="math_constant"></block>
              <block type="math_round"></block>
              <block type="math_on_list"></block>
              <block type="math_modulo"></block>
              <block type="math_random_int"></block>
              <block type="math_random_float"></block>
            </category>
  
            <!-- Text -->
            <category name="Text" colour="#FF66B2">
              <block type="comment_block"></block>
              <block type="text"></block>
              <block type="text_join"></block>
              <block type="text_append"></block>
              <block type="text_length"></block>
              <block type="text_isEmpty"></block>
              <block type="text_indexOf"></block>
              <block type="text_charAt"></block>
              <block type="text_changeCase"></block>
              <block type="text_trim"></block>
              <block type="text_print"></block>
            </category>
  
            <!-- Lists -->
            <category name="Lists" colour="#745BA8">
              <block type="lists_create_with"></block>
              <block type="lists_repeat"></block>
              <block type="lists_length"></block>
              <block type="lists_isEmpty"></block>
              <block type="lists_indexOf"></block>
              <block type="lists_getIndex"></block>
              <block type="lists_setIndex"></block>
              <block type="lists_getSublist"></block>
              <block type="lists_sort"></block>
            </category>
  
            <!-- Variables -->
            <category name="Variables" colour="#9B51E0">
              <block type="variables_get"></block>
              <block type="variables_set"></block>
            </category>
  
            <!-- Functions -->
            <category name="Functions" colour="#40BF40">
              <block type="any_key_pressed"></block>
              <block type="specific_key_pressed"></block>
              <block type="wait"></block>
              <block type="create_object"></block>
              <block type="procedures_defnoreturn"></block>
              <block type="procedures_defreturn"></block>
              <block type="procedures_callnoreturn"></block>
              <block type="procedures_callreturn"></block>
            </category>
  
            <!-- Objects -->
            <category name="Objects" colour="#FFA500">
            </category>
          </xml>`,
        grid: {
          spacing: 20,
          length: 3,
          colour: '#ccc',
          snap: true
        },
        scrollbars: true,
        trashcan: true,

        zoom: {
          controls: true,
          wheel: true,
          startScale: 1.0,
          maxScale: 3,
          minScale: 0.3,
          scaleSpeed: 1.2
        }
      });
  
      workspace.addChangeListener(updateCodeFromBlockly);
  
      isBlockyInitialized = true;
    }
  }
  
  // Function to update `currentCode` whenever the Blockly workspace changes
  function updateCodeFromBlockly() {
    currentCode = Blockly.JavaScript.workspaceToCode(Blockly.getMainWorkspace());
  }
  
  function SaveToLocalStorage() {
    // Save Blockly workspace
    if (typeof Blockly !== 'undefined') {
      const workspace = Blockly.getMainWorkspace();
      const xml = Blockly.Xml.workspaceToDom(workspace);
      const xmlText = Blockly.Xml.domToText(xml);
      localStorage.setItem('blocklyWorkspace', xmlText);
    }
  }
  
  function loadFromLocalStorage() {
    VisualScriptEditorClicked(); // Ensure Blockly editor is active
    // Load Blockly workspace
    const xmlText = localStorage.getItem('blocklyWorkspace');
  
    if (xmlText && typeof Blockly !== 'undefined') {
      try {
        // Parse XML string to DOM
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlText, 'application/xml');
  
        // Get Blockly workspace and import XML
        const workspace = Blockly.getMainWorkspace();
        if (workspace) {
          Blockly.Xml.domToWorkspace(xmlDoc.documentElement, workspace);
          localStorage.removeItem('blocklyWorkspace');
        } else {
          console.error('Blockly workspace is not available.');
        }
      } catch (error) {
        console.error('Error loading Blockly workspace:', error);
      }
    } else {
      alert('No saved workspace or Blockly is not available!');
    }
  }